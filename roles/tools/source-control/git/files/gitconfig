[core]
autocrlf = input
excludesfile = ~/.gitignore
editor = vi
pager = less -R

[color]
diff = auto
status = auto
branch = auto
interactive = auto
ui = auto

[gui]
encoding = utf-8

[mergetool "kdiff3"]
keepBackup = false

# Meld setup, see: http://stackoverflow.com/questions/34119866/setting-up-and-using-meld-as-your-git-difftool-and-mergetool
# and http://stackoverflow.com/questions/11133290/git-merging-using-meld
[mergetool "meld"]
keepBackup = false
cmd = meld "$BASE" "$LOCAL" "$REMOTE" --auto-merge --output "$MERGED"

[merge]
conflictstyle = diff3
renamelimit = 10000
summary = true

[difftool "meld"]
cmd = meld --diff "$LOCAL" "$REMOTE"

[diff]
renamelimit = 10000
renames = copies

[branch]
autosetupmerge = always
autosetuprebase = local

[rerere]
enabled = false

[push]
default = simple
#default = tracking

[alias]
##############################################################################
# Shorten common commands
##############################################################################
co = checkout
st = status
br = branch

##############################################################################
# Script-friendly ways to list files according to their status
##############################################################################

# List all files in the index
lsi = diff --cached --name-only --diff-filter=ACDMRTXB

# List all modified files
# lsm = !git diff --name-only | sort -u
lsm = ls-files -m

# List all deleted files
lsd = ls-files -d

# List all untracked files
lsu = ls-files --others --exclude-standard

# List all unmerged file (during a merge with conflicts)
lsum = !git diff --name-status --diff-filter=U | cut -f2
    
##############################################################################
# Getting information from the commit history
##############################################################################

# log flat: colored git log using one line, no merge commits, no graph
lgf = log --no-merges --date-order --pretty=format:\"%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an - %ae>%Creset\" --abbrev-commit --date=relative

# git log using one line graph output
lg = log --graph --date-order --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an - %ae>%Creset' --abbrev-commit --date=relative

# what was just merged in this branch (right after a git pull or git merge)
logmerged = lgf ORIG_HEAD..
